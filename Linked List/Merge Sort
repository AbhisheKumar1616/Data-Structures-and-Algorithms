from sys import stdin, setrecursionlimit

setrecursionlimit(10 ** 6)


# Following is the Node class already written for the Linked List
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


def midPoint(head):
    slow = head
    fast = head
    while fast.next != None and fast.next.next != None:
        slow = slow.next
        fast = fast.next.next

    return slow


def mergeTwoSortedLinkedLists(head1, head2):
    newhead, tail = None, None
    while head1 is not None and head2 is not None:
        if head1.data < head2.data:
            if newhead is None:
                newhead = head1
                tail = head1
            else:
                tail.next = head1
                tail = head1
            head1 = head1.next
        else:
            if newhead is None:
                newhead = head2
                tail = head2
            else:
                tail.next = head2
                tail = head2
            head2 = head2.next
    if head1 is not None:
        tail.next = head1

    if head2 is not None:
        tail.next = head2

    return newhead


def mergeSort(head):
    # Your code goes here
    if head is None or head.next is None:
        return head
    head1 = head
    mid = midPoint(head)
    head2 = mid.next
    mid.next = None
    head1 = mergeSort(head1)
    head2 = mergeSort(head2)
    newhead = mergeTwoSortedLinkedLists(head1, head2)
    return newhead


# Taking Input Using Fast I/O
def takeInput():
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1):
        data = datas[i]
        newNode = Node(data)

        if head is None:
            head = newNode
            tail = newNode

        else:
            tail.next = newNode
            tail = newNode

        i += 1

    return head


def printLinkedList(head):
    while head is not None:
        print(head.data, end=" ")
        head = head.next

    print()


# main
t = int(stdin.readline().rstrip())

while t > 0:
    head = takeInput()

    newHead = mergeSort(head)
    printLinkedList(newHead)

    t -= 1
