
from sys import stdin

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None


def length(head):
    c=0
    while head is not None:
        c+=1
        head=head.next
    return c
def newstartnode(head,n):
    i=0
    while i<n and head is not None:
        i+=1
        head=head.next
    return head
def lastnode(head):
    while head.next is not None:
        head=head.next
    return head
def followupnode(head,n):
    currhead=head
    fln=head
    i=0
    while i<n-1:
        i+=1
        fln=fln.next
    fln.next=None
    return currhead

def appendLastNToFirst(head, n) :
    #Your code goes here
    if head is None:
        return head
    c=length(head)
    if n>=c or n<=0:
        return head
    n=c-n
    nsn=newstartnode(head,n)
    ln=lastnode(head)
    fun=followupnode(head,n)
    ln.next=fun
    return nsn






#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head


#to print the linked list
def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :

    head = takeInput()
    n = int(stdin.readline().rstrip())

    head = appendLastNToFirst(head, n)
    printLinkedList(head)

    t -= 1
